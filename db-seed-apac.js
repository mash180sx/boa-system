// Generated by CoffeeScript 1.3.1
(function() {
  var Sync, apac, conf, db;

  Sync = require('sync');

  apac = require('./lib/apac');

  db = require('./lib/db');

  conf = require('./config');

  Sync(function() {
    var Commodities, JANS, client, in1, out1, stream, updater;
    client = db.open.sync(null, conf.db);
    Commodities = client.collection('commodities');
    Commodities.update({
      amazon: {
        $exists: 1
      }
    }, {
      $unset: {
        amazon: 1
      }
    }, {
      multi: true
    });
    Sync.sleep(15 * 1000);
    updater = function(items, callback) {
      var i, item, _i, _len;
      for (i = _i = 0, _len = items.length; _i < _len; i = ++_i) {
        item = items[i];
        console.log(item);
      }
      return callback(null, i);
    };
    in1 = 0;
    out1 = 0;
    JANS = [];
    stream = Commodities.find({
      JAN: {
        $ne: ''
      }
    }, {
      JAN: 1,
      amount: 1
    }).stream();
    return stream.on('data', function(doc) {
      if (doc != null) {
        console.log(in1, doc);
        JANS[in1 % 10] = doc.JAN;
        if ((++in1 % 10) === 0) {
          stream.pause();
          return Sync(function() {
            var res;
            res = apac.getApaclist.sync(null, conf.amazon, JANS);
            return updater(JANS, res, function(err, count) {
              JANS = [];
              out1 += 10;
              console.log(in1, out1);
              if (in1 === out1) {
                stream.resume();
              }
            });
          });
        }
      } else {
        if ((JANS != null ? JANS.length : void 0) > 0) {
          return Sync(function() {
            var res;
            res = apac.getApaclist.sync(null, conf.amazon, JANS);
            console.log('end', res);
            out1 += JANS.length;
            console.log(in1, out1);
            Sync.sleep(15 * 1000);
            console.log("search result = " + in1);
            return db.close();
          });
        }
      }
    });
  });

}).call(this);
