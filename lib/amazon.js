// Generated by CoffeeScript 1.3.1
(function() {
  var AmazonManager, EventEmitter, httpGet, phantom,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  phantom = require('phantom');

  EventEmitter = require('events').EventEmitter;

  /*
  #    Amazon テスト用コード
  #1.出品用アカウント サインイン画面
  #　 https://www.amazon.co.jp/ap/signin?_encoding=UTF8&openid.assoc_handle=jpflex&openid.claimed_id=http%3A%2F%2Fspecs.openid.net%2Fauth%2F2.0%2Fidentifier_select&openid.identity=http%3A%2F%2Fspecs.openid.net%2Fauth%2F2.0%2Fidentifier_select&openid.mode=checkid_setup&openid.ns=http%3A%2F%2Fspecs.openid.net%2Fauth%2F2.0&openid.ns.pape=http%3A%2F%2Fspecs.openid.net%2Fextensions%2Fpape%2F1.0&openid.pape.max_auth_age=900&openid.return_to=https%3A%2F%2Fwww.amazon.co.jp%2Fgp%2Fseller-account%2Fmanagement%2Fyour-account.html%3Fie%3DUTF8%26ref_%3Dya__1
  #
  #　 form[name=signin]
  #    document.getElementById("email").value = email
  #    document.getElementById("password").value = password
  #    { email, password }
  #    document.signin.submit()  ???
  #
  #2.在庫管理(在庫一覧)
  #
  #  https://sellercentral.amazon.co.jp/myi/search/ProductSummary
  #  { sku, asin, title, release, amount, condition, price, otherprice, fba }
  #
  #3.出品を追加
  #3.1.商品を登録(出品商品のASINなどを入力)
  #
  #  https://sellercentral.amazon.co.jp/gp/ezdpc-gui/start.html/ref=im_addlisting_dnav_home_
  #  form[name=itemSearchForm]
  #  input#searchStringTextId
  #    TODO: 本の場合はISBNで詳細が表示される。他の場合も調査要
  #          例．4774146293　(ISBN 実践JS)
  #  document.itemSearchForm.submit() ???
  #3.2.商品を登録(検索結果 ISBNの場合　　注：商品名の場合は異なった動き)
  #  内容はほぼ3.1に検索結果が追加された画面。POST結果により以下のURLにRedirectされている
  #    https://catalog-sc.amazon.co.jp/abis/ItemSearch/Search
  #  TODO: ISBNで絞りこまれているため、submitだけでOK???...
  #  TODO: いや、<button ... onclick="itemSelected('4774146293');">が必要だろう。
  #
  #  form[name=itemSelectedForm]
  #  itemSelected(__isbn_str__)
  #    TODO:その後、必要があれば以下
  #  document.itemSelectedForm.submit() ???
  */


  exports.AmazonManager = AmazonManager = (function(_super) {

    __extends(AmazonManager, _super);

    AmazonManager.name = 'AmazonManager';

    AmazonManager.prototype.api = function(method, args, callback) {
      if (args == null) {
        args = {};
      }
      if (callback == null) {
        callback = function() {};
      }
      if (this.methods[method] != null) {
        this.args = typeof args !== "function" ? args : void 0;
        this.callback = callback = typeof args === "function" ? args : callback;
        if (this.debug != null) {
          console.log("calling api ('" + method + "', {" + (JSON.stringify(args)) + "}, " + callback + ")");
        }
        return this.methods[method]();
      } else {
        return callback(901, new Error('No such method'));
      }
    };

    function AmazonManager(options, cb) {
      var phcb, setGlobal, viewSize,
        _this = this;
      if (options == null) {
        options = {};
      }
      if (cb == null) {
        cb = function() {};
      }
      if (typeof options === "function") {
        cb = options;
      }
      if (options.proxy != null) {
        this.proxy = options.proxy;
      }
      if (options.debug != null) {
        this.debug = true;
      }
      this.methods = {
        'signin': function() {
          if (!(_this.args.email != null) || !(_this.args.password != null)) {
            return _this.callback(new Error('Bad argument'));
          }
          _this.route = 'signin';
          return _this.trigger();
        },
        'productSummary': function() {
          _this.route = 'productSummary';
          return _this.trigger();
        },
        'productList': function() {
          _this.route = 'productList';
          return _this.trigger();
        },
        'add': function() {
          if (!(_this.args.asin != null) || !(_this.args.sellPrice != null)) {
            return _this.callback(new Error('Bad argument'));
          }
          _this.premium = _this.args.premium != null ? _this.args.premium : 10;
          _this.nius = _this.args.nius != null ? _this.args.nius : 0.8;
          _this.route = 'add-catalog';
          return _this.trigger();
        },
        'update': function() {
          if (!(_this.args.asin != null) || !(_this.args.marketplaceID != null)) {
            return _this.callback(new Error('Bad argument'));
          }
          _this.route = 'update';
          return _this.trigger();
        },
        'remove': function() {
          if (!(_this.args.asin != null)) {
            return _this.callback(new Error('Bad argument'));
          }
          _this.route = 'remove';
          return _this.trigger();
        },
        'resale': function() {},
        'signout': function() {
          _this.route = 'signout';
          return _this.trigger();
        }
      };
      this.routes = ['signin', 'signin-onload', 'signin-complete', 'productSummary', 'productSummary-onload', 'productList', 'productList-onload', 'productList-loop', 'resale', 'resale-onload', 'add-catalog', 'add-catalog-onload', 'add-select', 'add-fillsubmit', 'add-complete', 'update', 'update-onload', 'update-loop', 'update-fillsubmit', 'update-complete', 'signout', 'signout-onload'];
      setGlobal = function(page, name, data) {
        var fn, json;
        json = JSON.stringify(data);
        fn = "return window[" + (JSON.stringify(name)) + "]=" + json + ";";
        return page.evaluate(new Function(fn));
      };
      viewSize = {
        width: 1280,
        height: 1024
      };
      phcb = function(ph) {
        _this.phantom = ph;
        return ph.createPage(function(page) {
          _this.page = page;
          page.set('viewportSize', viewSize);
          page.set('onConsoleMessage', function(msg) {
            if (_this.debug != null) {
              console.log("sandbox: " + msg);
            }
          });
          page.set('onLoadStarted', function() {
            if (_this.debug != null) {
              return console.log("Start loading -- route: " + _this.route);
            }
          });
          page.set('onLoadFinished', function(status) {
            return page.evaluate((function() {
              console.log("title:" + document.title);
              return window.location.href;
            }), function(result) {
              page.location = result;
              if (_this.debug != null) {
                console.log("page.location: '" + page.location + "'");
              }
              if (_this.debug != null) {
                console.log("Load finished -- route: " + _this.route + ", status: " + status);
              }
              if (_this.debug != null) {
                page.render("amaMan-" + _this.route + ".png");
              }
              _this.trigger(status);
            });
          });
          _this.trigger = function(status) {
            if (status == null) {
              status = 'internal';
            }
            if (_this.debug != null) {
              console.log("emit '" + status + "'   ('" + _this.route + "')");
            }
            return _this.emit('route', status);
          };
          _this.on('route', function(status) {
            var getSku, getSku2, getTrs, trs;
            if (_this.debug != null) {
              console.log("on 'route', ('" + status + "')   : '" + _this.route + "'");
            }
            switch (_this.route) {
              case 'signin':
                page.open("https://www.amazon.co.jp/ap/signin?_encoding=UTF8&openid.assoc_handle=jpflex&openid.claimed_id=http%3A%2F%2Fspecs.openid.net%2Fauth%2F2.0%2Fidentifier_select&openid.identity=http%3A%2F%2Fspecs.openid.net%2Fauth%2F2.0%2Fidentifier_select&openid.mode=checkid_setup&openid.ns=http%3A%2F%2Fspecs.openid.net%2Fauth%2F2.0&openid.ns.pape=http%3A%2F%2Fspecs.openid.net%2Fextensions%2Fpape%2F1.0&openid.pape.max_auth_age=900&openid.return_to=https%3A%2F%2Fwww.amazon.co.jp%2Fgp%2Fseller-account%2Fmanagement%2Fyour-account.html%3Fie%3DUTF8%26ref_%3Dya__1");
                return _this.route = 'signin-onload';
              case 'signin-onload':
                setGlobal(page, '__args__', _this.args);
                page.evaluate(function() {
                  document.querySelector("input#ap_email").value = __args__.email;
                  document.querySelector("input#ap_password").value = __args__.password;
                  return document.querySelector("form#ap_signin_form").submit();
                });
                return _this.route = 'signin-complete';
              case 'signin-complete':
                return page.get('content', function(result) {
                  var re;
                  re = result.match(/ue_mid='(\w+)'/);
                  if (_this.debug != null) {
                    console.log("re:" + re + ", RegExp.$1:" + RegExp.$1);
                  }
                  if (_this.debug != null) {
                    console.log("marketplaceID(ue_mid) = " + RegExp.$1);
                  }
                  return _this.callback(null, RegExp.$1);
                });
              case 'productSummary':
                _this.route = 'productSummary-onload';
                return page.open("https://sellercentral.amazon.co.jp/myi/search/ProductSummary");
              case 'productSummary-onload':
                return page.evaluate((function() {
                  var total, totalAmount;
                  total = document.querySelector('div#pageListing strong').innerHTML;
                  return totalAmount = Number(total);
                }), function(result) {
                  if (_this.debug != null) {
                    console.log("result: " + result);
                  }
                  page.totalAmount = result;
                  return _this.callback(null, result);
                });
              case 'productList':
                _this.route = 'productList-onload';
                return page.open("https://sellercentral.amazon.co.jp/myi/search/ProductSummary");
              case 'productList-onload':
                return page.evaluate((function() {
                  var total, totalAmount;
                  total = document.querySelector('div#pageListing strong').innerHTML;
                  return totalAmount = Number(total);
                }), function(result) {
                  if (_this.debug != null) {
                    console.log("result: " + result);
                  }
                  page.totalAmount = result;
                  page.pageNo = 1;
                  page.items = [];
                  _this.route = 'productList-loop';
                  return _this.trigger();
                });
              case 'productList-loop':
                /*
                              ##3.1.在庫管理：各アイテムの情報を取得。全商品数に満たない場合は次ページヘ移動していく
                              ##  ページ当りの商品数を250とし(予め設定)、ページ数は計算して求める。
                              ##  searchController.gotoPage(_P_)でページ移動が可能
                              ##
                              ##  追加の場合、まずは商品一覧にないか全検索し、なければ追加を実施する。
                              ##  以下のようにして各商品の情報を取得
                              ##    items = document.querySelectorAll('input[name^=price]')
                              ##      <input name="price|FR-KP0J-MKU2|4774146293" value="2,849"
                              ##  また、商品のステータスを以下のように取得
                              ##    trs = document.querySelectorAll('tr[id|=sku]')
                              ##  各tdは以下のような順番で格納されている
                              ##    td[0] -> <td><input type="hidden" name="sku" value="XX-XXXX-XXXX">
                              ##    td[1] -> <td><input type="checkbox"
                              ##    td[2] -> <td><span...><a href="#" >変更</a><a href=...>▼</a>
                              ##    td[3] -> <td class="alignleft">出品中</td>         ==> status
                              ##    td[4] -> <td class="alignleft">KO-6HDJ-U0S5</td>  ==> sku
                              ##    td[5] -> <td class="alignleft"><a href=...>        4881357018</a>
                              ##      ==> asin
                              ##    td[6] -> <td class="alignleft"><a href=...>独習C++ [Apr 01, 1999] シルト,ハーバート、 靖, 神林、 Schildt,Herbert; トップスタジオ</a></td>
                              ##      ==> title
                              ##    td[7] -> <td>2009/11/17 03:58:12</td>             ==> release
                              ##    td[8] -> <td><span...><input name="inv|KO-6HDJ-U0S5|4881357018" value="0"...
                              ##      ==> amount
                              ##    td[9] -> <td>中古 – 可</td>                        ==> condition
                              ##    td[10]-> <td><div...><span...><input name="price|KO-6HDJ-U0S5|4881357018" value="398"... ==>出品価格
                              ##      ==> sellPrice
                              ##    td[11]-> <td><div><a ...> <div calss="shippingCharge tiny"...> or <a >
                              ##                出品価格が最低価格の場合は 価格情報なし
                              ##      ==> lowPrice
                              ##      ==> delPrice 
                              ##          TODO: 出品価格=最低価格の場合 lowPrice,delPrice 共に -1 とする
                              ##    td[12]-> <td>出品者</td>                           ==> delivery
                */

                trs = [];
                getTrs = function() {
                  var tds;
                  tds = [];
                  trs = document.querySelectorAll('tr[id|=sku]');
                  return Array.prototype.map.call(trs, function(tr) {
                    var hashAs, hashTds, i, input, obj, td, _i, _len, _ref, _ref1, _ref2;
                    tds = tr.querySelectorAll('td');
                    obj = {};
                    hashTds = {
                      3: 'status',
                      4: 'sku',
                      7: 'release',
                      9: 'condition',
                      12: 'delivery'
                    };
                    hashAs = {
                      5: 'asin',
                      6: 'title'
                    };
                    for (i = _i = 0, _len = tds.length; _i < _len; i = ++_i) {
                      td = tds[i];
                      switch (i) {
                        case 3:
                        case 4:
                        case 7:
                        case 9:
                        case 12:
                          obj[hashTds[i]] = td.innerHTML;
                          break;
                        case 5:
                        case 6:
                          obj[hashAs[i]] = td.querySelector('a').innerHTML.match(/[^\t\n]+/)[0];
                          break;
                        case 8:
                          obj.amount = Number((input = td.querySelector('input')) != null ? input.value : td.innerHTML);
                          break;
                        case 10:
                          obj.sellPrice = Number((input = td.querySelector('input')) != null ? input.value.replace(',', '') : td.querySelector('.yourPriceDiv').innerHTML.match(/\d+/g).join(''));
                          break;
                        case 11:
                          obj.lowPrice = Number((_ref = td.querySelector('a').innerHTML.match(/\d+/g)) != null ? _ref.join('') : void 0) || -1;
                          obj.delPrice = Number((_ref1 = td.querySelector('div[class="shippingCharge tiny"]')) != null ? (_ref2 = _ref1.innerHTML.match(/\d+/g)) != null ? _ref2.join('') : void 0 : void 0) || -1;
                      }
                    }
                    return obj;
                  });
                };
                return page.evaluate(getTrs, function(trs) {
                  page.items = page.items.concat(trs);
                  if (_this.debug != null) {
                    console.log("trs: " + trs.length + ", items: " + page.items.length);
                  }
                  if (page.items.length < page.totalAmount) {
                    return page.open("https://sellercentral.amazon.co.jp/myi/search/ProductSummary" + ("?searchPageOffset=" + (++page.pageNo) + "#"));
                    /*
                                      # setGlobal asin
                                      setGlobal page, '__page__', ++page.pageNo
                                      page.evaluate -> 
                                        # TODO: 余り綺麗ではないが、ボタン7個目が丁度次ページボタンに当たるため
                                        #     当面このやり方とする
                                        buttons = document.querySelectorAll('button')
                                        buttons[6].click()
                    */

                  } else {
                    return _this.callback(null, page.items);
                  }
                });
              case 'add-catalog':
                /*
                              ##4.出品を追加
                              ##4.1.商品を登録(出品商品のASINなどを入力)
                              ##
                              ##  https://sellercentral.amazon.co.jp/gp/ezdpc-gui/start.html/ref=im_addlisting_dnav_home_
                              ##  form[name=itemSearchForm]
                              ##  input#searchStringTextId
                              ##    TODO: 本の場合はISBNで詳細が表示される。他の場合も調査要
                              ##          例. 4774146293　(ISBN 実践JS)
                              ##  document.itemSearchForm.submit() ???
                              ##  上記はURLでは iframe を使用して下記カタログ検索画面を表示している。こちらを使用する！！
                              ##  https://catalog-sc.amazon.co.jp/abis/syh/SCIdentify.amzn?_encoding=UTF8&ref_=im_addlisting_dnav_home_
                */

                _this.route = 'add-catalog-onload';
                return page.open("https://catalog-sc.amazon.co.jp/abis/syh/SCIdentify.amzn?_encoding=UTF8&ref_=im_addlisting_dnav_home_");
              case 'add-catalog-onload':
                setGlobal(page, '__asin__', _this.args.asin);
                _this.route = 'add-select';
                return page.evaluate(function() {
                  document.querySelector('input#searchStringTextId').value = __asin__;
                  return document.querySelector("form[name='itemSearchForm']").submit();
                });
              case 'add-select':
                /*
                              ##4.2.商品を登録(検索結果 ISBNの場合　　注：商品名の場合は異なった動き)
                              ##  内容はほぼ3.1に検索結果が追加された画面。POST結果により以下のURLにRedirectされている
                              ##    https://catalog-sc.amazon.co.jp/abis/ItemSearch/Search
                              ##  ##TODO: ISBNで絞りこまれているため、submitだけでOK???...
                              ##   <button ... onclick="itemSelected('4774146293');">が必要だろう。 
                              ##   →　必要！！　エラーメッセージのようなものが表示されるが気にしないこと！
                              ##
                              ##  form[name=itemSelectedForm]
                              ##  itemSelected(__isbn_str__)
                              ##    TODO:その後、必要があれば以下　→　必要！　実施
                              ##  document.itemSelectedForm.submit() !!
                */

                setGlobal(page, '__asin__', _this.args.asin);
                _this.route = 'add-fillsubmit';
                return page.evaluate(function() {
                  itemSelected(__asin__);
                  return document.itemSelectedForm.submit();
                });
              case 'add-fillsubmit':
                /*
                              ##4.3.商品提供の情報を登録
                              ##  具体的に出品情報を登録する。以下のURLにRedirectされている
                              ##    https://catalog-sc.amazon.co.jp/abis/Display/ItemSelected
                              ##    TODO: Form Dataとしては asin, marketplaceIDとなっている。
                              ##          フォームデータだけ渡してこのページをダイレクトに表示できると思われる
                              ##  入力項目は以下とする（必須項目は頭に*を付加）
                              ##   * コンディション
                              ##        id="offering_condition" value="Used|Acceptable" 中古 – 可
                              ##          <select class="" id="offering_condition" name="offering_condition" >
                              ##              <option value="">- 選択 -</option>
                              ##              <option value="New|New"  > 新品</option>
                              ##              <option value="Used|LikeNew"  > 中古 – ほぼ新品</option>
                              ##              <option value="Used|VeryGood"  > 中古 – 非常に良い</option>
                              ##              <option value="Used|Good"  > 中古 – 良い</option>
                              ##              <option value="Used|Acceptable"  > 中古 – 可</option>
                              ##              <option value="Collectible|LikeNew"  > コレクター商品 – ほぼ新品</option>
                              ##              <option value="Collectible|VeryGood"  > コレクター商品 – 非常に良い</option>
                              ##              <option value="Collectible|Good"  > コレクター商品 – 良い</option>
                              ##              <option value="Collectible|Acceptable"  > コレクター商品 – 可</option>
                              ##              </select>
                              ##     コンディション説明
                              ##        id="offering_condition_note" 
                              ##          <textarea name="offering_condition_note" cols="40" rows="5" id="offering_condition_note"></textarea>
                              ##   * 販売価格
                              ##        id="our_price"
                              ##          <input type="text" name="our_price" maxlength="50" size="6" value="" onchange="" id="our_price">
                              ##   * 在庫
                              ##        id="Offer_Inventory_Quantity"
                              ##           <input type="text" name="Offer_Inventory_Quantity" maxlength="25" size="6" value="" onchange="return validateInteger(this, '\u5728\u5EAB\u306F\u6574\u6570\u3067\u3042\u308B\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059\u3002') && validateIntRange(this, 0, 1000, '\u5728\u5EAB\u306F0\u304B\u30891000\u306E\u7BC4\u56F2\u306B\u3042\u308A\u307E\u305B\u3093\u3002')" id="Offer_Inventory_Quantity"></span>
                              ##   TODO: 国内配送が4日から7日以内となっているので現時点では以下は入力しないこととする
                              ##     商品の入荷予定日　ブックオフからの入荷日を2日として今日+2日で入力(YYYY/MM/DD)
                              ##        id="Offer_Inventory_RestockDate" 
                              ##          <input  type="text" size="10" name="Offer_Inventory_RestockDate" id="Offer_Inventory_RestockDate" value="" onchange="" />
                              ##
                              ##  form[name=productForm]
                              ##
                              ##  productTableController.buttonClicked('productTableSaveAndFinish')
                              ##  document.productForm.submit() !!
                */

                setGlobal(page, '__item__', _this.args);
                return page.evaluate(function() {
                  document.querySelector('#offering_condition').value = __item__.condition != null ? __item__.condition : "Used|Acceptable";
                  document.querySelector('#offering_condition_note').value = __item__.conditionNote != null ? __item__.conditionNote : "多少きず等ありますが使用には支障のないレベルです。";
                  document.querySelector('#our_price').value = __item__.sellPrice;
                  document.querySelector('#Offer_Inventory_Quantity').value = __item__.amount != null ? __item__.amount : 1;
                  productTableController.buttonClicked('productTableSaveAndFinish');
                  return document.productForm.submit();
                }, function(result) {
                  return _this.route = 'add-complete';
                });
              case 'add-complete':
                return _this.callback(null, status);
              case 'update':
                _this.route = 'update-onload';
                return page.open("https://sellercentral.amazon.co.jp/myi/search/ProductSummary");
              case 'update-onload':
                return page.evaluate((function() {
                  var total, totalAmount;
                  total = document.querySelector('div#pageListing strong').innerHTML;
                  return totalAmount = Number(total);
                }), function(result) {
                  if (_this.debug != null) {
                    console.log("result: " + result);
                  }
                  page.totalAmount = result;
                  page.pageNo = 1;
                  page.itemLength = 0;
                  _this.route = 'update-loop';
                  return _this.trigger();
                });
              case 'update-loop':
                /*
                              ##5.2.在庫管理：引数 asin, marketplaceID から詳細画面表示に必要な sku を取得する
                              ##
                              ##  追加の場合、まずは商品一覧にないか全検索し、なければ追加を実施する。
                              ##  各商品の詳細については3.在庫一覧を参照。
                */

                trs = [];
                getSku = function() {
                  var asin, i, sku, tds, tr, _i, _len;
                  tds = [];
                  trs = document.querySelectorAll('tr[id|=sku]');
                  console.log("trs.length = " + trs.length);
                  for (i = _i = 0, _len = trs.length; _i < _len; i = ++_i) {
                    tr = trs[i];
                    tds = tr.querySelectorAll('td');
                    asin = tds[5].querySelector('a').innerHTML.match(/[^\t\n]+/)[0];
                    if (asin === __asin__) {
                      sku = tds[4].innerHTML;
                      console.log("hit: sku = " + sku);
                      return {
                        sku: sku
                      };
                    }
                  }
                  return {
                    length: trs.length
                  };
                };
                setGlobal(page, '__asin__', _this.args.asin);
                return page.evaluate(getSku, function(result) {
                  if (_this.debug != null) {
                    console.log("result: " + (JSON.stringify(result)));
                  }
                  if (result.sku != null) {
                    _this.route = 'update-fillsubmit';
                    return page.open("https://catalog-sc.amazon.co.jp/abis/edit/RelistProduct.amzn" + ("?sku=" + result.sku + "&asin=" + _this.args.asin + "&marketplaceID=" + _this.args.marketplaceID));
                  } else if ((page.itemLength += result.length) < page.totalAmount) {
                    return page.open("https://sellercentral.amazon.co.jp/myi/search/ProductSummary" + ("?searchPageOffset=" + (++page.pageNo) + "#"));
                  } else {
                    _this.route = 'add-catalog';
                    return _this.trigger();
                  }
                });
              case 'update-fillsubmit':
                setGlobal(page, '__item__', _this.args);
                return page.evaluate(function() {
                  if (__item__.condition != null) {
                    document.querySelector('#offering_condition').value = __item__.condition;
                  }
                  if (__item__.conditionNote != null) {
                    document.querySelector('#offering_condition_note').value = __item__.conditionNote;
                  }
                  if (__item__.sellPrice != null) {
                    document.querySelector('#our_price').value = __item__.sellPrice;
                  }
                  if (__item__.amount != null) {
                    document.querySelector('#Offer_Inventory_Quantity').value = __item__.amount;
                  }
                  productTableController.buttonClicked('productTableSaveAndFinish');
                  return document.productForm.submit();
                }, function(result) {
                  return _this.route = 'update-complete';
                });
              case 'update-complete':
                return _this.callback(null, status);
              case 'remove':
                _this.route = 'remove-onload';
                return page.open("https://sellercentral.amazon.co.jp/myi/search/ProductSummary");
              case 'remove-onload':
                return page.evaluate((function() {
                  var total, totalAmount;
                  total = document.querySelector('div#pageListing strong').innerHTML;
                  return totalAmount = Number(total);
                }), function(result) {
                  if (_this.debug != null) {
                    console.log("result: " + result);
                  }
                  page.totalAmount = result;
                  page.pageNo = 1;
                  page.itemLength = 0;
                  _this.route = 'remove-loop';
                  return _this.trigger();
                });
              case 'remove-loop':
                /*
                              ##6.2.在庫管理：引数 asin, marketplaceID から詳細画面表示に必要な sku を取得する
                              ##
                              ##  追加の場合、まずは商品一覧にないか全検索し、なければ追加を実施する。
                              ##  各商品の詳細については3.在庫一覧を参照。
                */

                trs = [];
                getSku2 = function() {
                  var asin, i, sku2, tds, tr, _i, _len;
                  tds = [];
                  trs = document.querySelectorAll('tr[id|=sku]');
                  console.log("trs.length = " + trs.length);
                  for (i = _i = 0, _len = trs.length; _i < _len; i = ++_i) {
                    tr = trs[i];
                    tds = tr.querySelectorAll('td');
                    asin = tds[5].querySelector('a').innerHTML.match(/[^\t\n]+/)[0];
                    if (asin === __asin__) {
                      sku2 = tr.getAttribute('id').replace('sku-', '');
                      console.log("hit: sku2 = " + sku2);
                      return {
                        sku2: sku2
                      };
                    }
                  }
                  return {
                    length: trs.length
                  };
                };
                setGlobal(page, '__asin__', _this.args.asin);
                return page.evaluate(getSku2, function(result) {
                  if (_this.debug != null) {
                    console.log("result: " + (JSON.stringify(result)));
                  }
                  if (result.sku2 != null) {
                    _this.route = 'remove-complete';
                    setGlobal(page, '__sku2__', result.sku2);
                    return page.evaluate(function() {
                      return deleteSingleSku(__sku2__);
                    }, function(result) {
                      _this.route = 'idle';
                      return _this.trigger();
                    });
                  } else if ((page.itemLength += result.length) < page.totalAmount) {
                    return page.open("https://sellercentral.amazon.co.jp/myi/search/ProductSummary" + ("?searchPageOffset=" + (++page.pageNo) + "#"));
                  } else {
                    return _this.callback(new Error('asin not found'));
                  }
                });
              case 'remove-complete':
                return _this.callback(null, status);
              case 'signout':
                _this.route = 'signout-onload';
                return _this.trigger();
              case 'signout-onload':
                _this.route = 'close';
                _this.trigger();
                return _this.callback(null);
              case 'idle':
                if (_this.debug != null) {
                  console.log('now idling...');
                }
                if (_this.debug != null) {
                  page.render("amaMan-" + _this.route + ".png");
                }
                return _this.callback(null, null);
              case 'close':
                return _this.phantom.exit();
            }
          });
          return cb(null, _this);
        });
      };
      console.log(options);
      if (options.proxy != null) {
        phantom.create("--proxy=" + options.proxy, "--proxy-type=http", phcb);
      } else {
        phantom.create(phcb);
      }
    }

    return AmazonManager;

  })(EventEmitter);

  /*
          when 3
            #2.在庫管理(在庫一覧)
            #  TODO: 時々 複数の onLoadFinished が呼ばれる場合がある。解析要！！
            page.open "https://sellercentral.amazon.co.jp/myi/search/ProductSummary"
          when 4
            #2.1.在庫管理（在庫一覧）
            #  以下の情報を取得する。
            #    全商品数 -> <div id="pageListing"><strong>XX</strong>商品</div>
            #
            #  ページ当りの商品数を250とし(予め設定)、ページ数は計算して求める。
            #  searchController.gotoPage(_P_)でページ移動が可能
            #
            #  追加の場合、まずは商品一覧にないか全検索し、なければ追加を実施する。
            #  以下のようにして各商品の情報を取得
            #    items = document.querySelectorAll('input[name^=price]')
            #      <input name="price|FR-KP0J-MKU2|4774146293" value="2,849"
            #  また、商品のステータスを以下のように取得
            #    trs = document.querySelectorAll('tr[id|=sku]')
            #  各tdは以下のような順番で格納されている
            #    td(1) -> <td><input type="hidden" name="sku" value="XX-XXXX-XXXX">
            #    td(2) -> <td><input type="checkbox"
            #    td(3) -> <td><span...><a href="#" >変更</a><a href=...>▼</a>
            #    td(4) -> <td class="alignleft">出品中</td>
            page.maketplaceID = page.evaluate ->
              document.querySelector('input[name=marketplaceID]').value
            
            # setGlobal asin
            setGlobal page, '__asin__', '4774146293'
  
            item = page.evaluate ->
              inputs = document.querySelectorAll('input[name^=price]')
              item = {}
              for input, i in inputs
                [price, sku, asin] = input.name.split('|')
                value = input.value
                if asin is __asin__
                  item = { price: price, sku: sku, asin: asin, value: value }
              return item
          when 4
            #3.出品を追加
            #3.1.商品を登録(出品商品のASINなどを入力)
            #
            #  https://sellercentral.amazon.co.jp/gp/ezdpc-gui/start.html/ref=im_addlisting_dnav_home_
            #  form[name=itemSearchForm]
            #  input#searchStringTextId
            #    TODO: 本の場合はISBNで詳細が表示される。他の場合も調査要
            #          例. 4774146293　(ISBN 実践JS)
            #  document.itemSearchForm.submit() ???
            #  上記はURLでは iframe を使用して下記カタログ検索画面を表示している。こちらを使用する！！
            #  https://catalog-sc.amazon.co.jp/abis/syh/SCIdentify.amzn?_encoding=UTF8&ref_=im_addlisting_dnav_home_
            page.open "https://catalog-sc.amazon.co.jp/abis/syh/SCIdentify.amzn?_encoding=UTF8&ref_=im_addlisting_dnav_home_"
          when 5
            # 3.1.2.form をフィルしてsubmit
  
            # setGlobal conf.amazon
            setGlobal page, '__conf__', conf.amazon
  
            # form fill and submit
            page.evaluate ->
              document.querySelector('input#searchStringTextId').value = "477414813X"
              document.querySelector("form[name='itemSearchForm']").submit()
          when 6
            #3.2.商品を登録(検索結果 ISBNの場合　　注：商品名の場合は異なった動き)
            #  内容はほぼ3.1に検索結果が追加された画面。POST結果により以下のURLにRedirectされている
            #    https://catalog-sc.amazon.co.jp/abis/ItemSearch/Search
            #  ##TODO: ISBNで絞りこまれているため、submitだけでOK???...
            #   <button ... onclick="itemSelected('4774146293');">が必要だろう。 
            #   →　必要！！　エラーメッセージのようなものが表示されるが気にしないこと！
            #
            #  form[name=itemSelectedForm]
            #  itemSelected(__isbn_str__)
            #    TODO:その後、必要があれば以下　→　必要！　実施
            #  document.itemSelectedForm.submit() !!
            
            # setGlobal conf.amazon
            setGlobal page, '__conf__', conf.amazon
  
            # form fill and submit
            page.evaluate ->
              itemSelected('477414813X')
              document.itemSelectedForm.submit()
          when 7
            #3.3.商品提供の情報を登録
            #  具体的に出品情報を登録する。以下のURLにRedirectされている
            #    https://catalog-sc.amazon.co.jp/abis/Display/ItemSelected
            #    TODO: Form Dataとしては asin, marketplaceIDとなっている。
            #          フォームデータだけ渡してこのページをダイレクトに表示できると思われる
            #  入力項目は以下とする（必須項目は頭に*を付加）
            #   * コンディション
            #        id="offering_condition" value="Used|Acceptable" 中古 – 可
            #     コンディション説明
            #        id="offering_condition_note" 
            #   * 販売価格
            #        id="our_price"
            #   * 在庫
            #        id="Offer_Inventory_Quantity"
            #   TODO: 国内配送が4日から7日以内となっているので現時点では以下は入力しないこととする
            #     商品の入荷予定日　ブックオフからの入荷日を2日として今日+2日で入力(YYYY/MM/DD)
            #
            #  form[name=productForm]
            #
            #  productTableController.buttonClicked('productTableSaveAndFinish')
            #  document.productForm.submit() !!
            
            # setGlobal conf.amazon
            setGlobal page, '__conf__', conf.amazon
  
            # form fill and submit
            page.evaluate ->
              #console.log "when 7: #{document.querySelector('#searchStringTextId').id}"
              #otherprice = document.querySelector("a[href$='condition=used']").parentNode.querySelector('span')
              #console.log "otherprice=#{otherprice}"
              document.querySelector('#offering_condition').value = "Used|Acceptable"
              document.querySelector('#offering_condition_note').value = "多少きず等ありますが読書するのには支障がないレベルです。"
              document.querySelector('#our_price').value = "5100"
              document.querySelector('#Offer_Inventory_Quantity').value = 1
              productTableController.buttonClicked('productTableSaveAndFinish')
              document.productForm.submit()
          when 8
            #3.4.商品提供情報の更新
            # TODO: 詳細の編集は以下のURL (sku, asin, marketplaceID が必要)
            #   https://catalog-sc.amazon.co.jp/abis/product/DisplayEditProduct?sku=FR-KP0J-MKU2&asin=4774146293&marketplaceID=A1VC38T7YXB528
  
            # setGlobal conf.amazon
            item = { sku: 'FR-KP0J-MKU2', asin: '4774146293', marketplaceID: 'A1VC38T7YXB528' }
            setGlobal page, '__item__', item
            
            page.open "https://catalog-sc.amazon.co.jp/abis/product/DisplayEditProduct?sku=#{item.sku}&asin=#{item.asin}&marketplaceID=#{item.marketplaceID}"
          when 9
            #3.4.商品提供情報の更新
            #3.4.2 具体的な値の追加と保存（更新）
            #  入力内容については3.3.の追加と同様。（画面も共有したような構成になっている）
            #
            #   * 販売価格
            #        id="our_price"
            #   * 在庫
            #        id="Offer_Inventory_Quantity"
            # form fill and submit
            page.evaluate ->
              document.querySelector('#our_price').value = "2900"
              document.querySelector('#Offer_Inventory_Quantity').value = 2
              productTableController.buttonClicked('productTableSaveAndFinish')
              document.productForm.submit()
            
          else
            #setTimeout -> 
            #  page.render "amatest5.png"
            #  amaMan.trigger()
            #  return
            #, 1000
            
            
            ph.exit()
        return
  
      # amaMan start
      amaMan.trigger()
  
  casper = require("casper").create()
  conf = require("./config")
  
  
  # 在庫商品(すべての在庫商品)画面の表示(未サインインのため、この時点ではサインイン画面に遷移)
  casper.start "https://sellercentral.amazon.co.jp/myi/search/ProductSummary", ->
    @viewport 1024, 768
    @capture "amatest1.png"
  
  # サインイン画面にてemail、passwordを入力
  casper.then ->
    @fill 'form[name=signin]', {
      email: conf.amazon.email,
      password: conf.amazon.password
    }, true
  
  casper.thenEvaluate (email, password) ->
    document.getElementById("email").value = email
    document.getElementById("password").value = password
    document.signin.submit()
    return
  ,
    email: conf.amazon.email
    password: conf.amazon.password
  
  trs = []
  getTrs = ->
    trs = document.querySelectorAll('tr[id|=sku]')
    Array::map.call trs, (el)-> el.getAttribute('id')
      
  # 在庫商品(すべての在庫商品)画面に遷移
  casper.then ->
    @capture "amatest2.png"
    trs = @evaluate getTrs
    for tr in trs
      @echo tr
  
  casper.run ->
    @exit()
  */


  httpGet = require('./httpGet').httpGet;

  /*
   *  get amazon product abstract
   *
   *  * getAbstract conf, JAN, callback
   *
   *  where
   *
   *  * conf      : configuration contains : proxy, port
   *  * JAN       : jan, ean
   *  * callback  : has two parameters. 1st is error object or null,
   *  *             2nd is data object
   *
   *  TODO: omit !rank!, past, diff
   *        if you need rank or another, you should httpget detail with asin
  */


  exports.getAbstract = function(conf, JAN, cb) {
    var result, url;
    url = "http://www.amazon.co.jp/s/field-keywords=" + JAN;
    console.log(url);
    result = {
      JAN: JAN,
      asin: null
    };
    httpGet(url, conf, function(err, $) {
      var $amaNew, $number, $other, $strike, amaNew, onew, oold, strike, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;
      if (err) {
        return cb(err, result);
      }
      $number = $('#resultCount span');
      if (($number != null ? (_ref = $number.text()) != null ? (_ref1 = _ref.match(/\d/)) != null ? _ref1[0] : void 0 : void 0 : void 0) !== '1') {
        return cb(err, result);
      }
      result.asin = $('#result_0').attr('name');
      $strike = (_ref2 = $('strike')) != null ? (_ref3 = _ref2.text()) != null ? (_ref4 = _ref3.match(/\d/g)) != null ? _ref4.join('') : void 0 : void 0 : void 0;
      strike = $strike != null ? Number($strike) : 0;
      $amaNew = (_ref5 = $('.price.addon')) != null ? (_ref6 = _ref5.text()) != null ? (_ref7 = _ref6.match(/\d/g)) != null ? _ref7.join('') : void 0 : void 0 : void 0;
      amaNew = $amaNew != null ? Number($amaNew) : 0;
      $other = $('.subPrice');
      onew = oold = 0;
      $other.each(function(index, elem) {
        var self, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16, _ref17, _ref18, _ref19, _ref8, _ref9;
        self = $(this);
        if ((self != null ? (_ref8 = self.children()) != null ? (_ref9 = _ref8.text()) != null ? _ref9.match(/新品/) : void 0 : void 0 : void 0) != null) {
          onew = (_ref10 = self.children()) != null ? (_ref11 = _ref10.next()) != null ? (_ref12 = _ref11.text()) != null ? (_ref13 = _ref12.match(/\d/g)) != null ? _ref13.join('') : void 0 : void 0 : void 0 : void 0;
          onew = onew ? Number(onew) : 0;
        }
        if ((self != null ? (_ref14 = self.children()) != null ? (_ref15 = _ref14.text()) != null ? _ref15.match(/中古品/) : void 0 : void 0 : void 0) != null) {
          oold = (_ref16 = self.children()) != null ? (_ref17 = _ref16.next()) != null ? (_ref18 = _ref17.text()) != null ? (_ref19 = _ref18.match(/\d/g)) != null ? _ref19.join('') : void 0 : void 0 : void 0 : void 0;
          return oold = oold ? Number(oold) : 0;
        }
      });
      console.log(strike, amaNew, onew, oold);
      result['new'] = Math.min(strike, Math.min(amaNew, onew));
      result.old = oold;
      return cb(null, result);
    });
  };

}).call(this);
