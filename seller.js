// Generated by CoffeeScript 1.3.1
(function() {
  var conf, db, limit, no_new_rate, no_used_rate, out_collection;

  conf = require('./config');

  db = require('./lib/db');

  no_used_rate = 0.8;

  no_new_rate = 10.0;

  out_collection = "temp";

  limit = 0;

  db.open(conf.db, function(err, client) {
    var Commodities, Temp, fields, index, map, options, query;
    if (err) {
      throw err;
    }
    Commodities = client.collection('commodities');
    Temp = client.collection('temp');
    Temp.drop();
    query = {
      $or: [
        {
          "amazon.old": {
            $gt: 1000
          }
        }, {
          "amazon.old": 0,
          "amazon.new": 0
        }, {
          "amazon.old": 0,
          "amazon.new": {
            $gt: 1000
          }
        }
      ]
    };
    fields = {
      _id: 0,
      JAN: 1,
      sku: 1,
      "category.primary": 1,
      "amazon.asin": 1,
      "price.old": 1,
      "price.new": 1,
      "amazon.old": 1,
      "amazon.new": 1
    };
    options = {
      sort: "price.old"
    };
    index = 0;
    map = function(err, doc) {
      var anew, aold, delivery_cost, gross_profit, gross_profit_ratio, net_price, result, sales_price, self, total_cost, _ref;
      if (err) {
        throw err;
      }
      console.log(index++, JSON.stringify(doc));
      if (doc === null) {
        fields = [
          {
            JAN: 1,
            asin: 1,
            cat: 1,
            pold: 1,
            pnew: 1,
            aold: 1,
            anew: 1,
            gross_profit: 1,
            gross_profit_ratio: 1
          }
        ];
        options = {
          safe: true
        };
        Temp.ensureIndex(fields, options, function(err, indexName) {
          client.close();
          return process.exit();
        });
        return;
      }
      self = doc;
      result = {
        JAN: self.JAN,
        sku: self.sku,
        asin: self.amazon.asin,
        cat: self.category.primary,
        pold: self.price.old,
        pnew: self.price["new"],
        aold: self.amazon.old,
        anew: self.amazon["new"]
      };
      result.sales_price = sales_price = (aold = self.amazon.old) > 0 ? (aold > (_ref = (anew = self.amazon["new"])) && _ref > 0) ? (result.type = 1, parseInt(anew * no_used_rate)) : (result.type = 2, aold) : (anew = self.amazon["new"]) > 0 ? (result.type = 3, parseInt(anew * no_used_rate)) : (result.type = 4, parseInt(self.price["new"] * no_new_rate));
      result.net_price = net_price = self.price.old;
      result.delivery_cost = delivery_cost = net_price > 1500 ? 0 : 350;
      result.total_cost = total_cost = net_price + delivery_cost;
      result.gross_profit = gross_profit = sales_price - total_cost;
      result.gross_profit_ratio = gross_profit_ratio = gross_profit / sales_price;
      return Temp.insert(result);
    };
    return Commodities.find(query, fields, options).limit(limit).each(map);
  });

}).call(this);
