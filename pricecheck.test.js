// Generated by CoffeeScript 1.3.3
(function() {
  var Sync, cluster, conf, db, numWorkers, pc;

  Sync = require('sync');

  cluster = require('cluster');

  numWorkers = require('os').cpus().length;

  pc = require('./lib/pricecheck');

  conf = require('./config');

  db = require('./lib/db');

  /*
  example = '9784876999767+%0D%0A9784839941239+%0D%0A9784401748693+%0D%0A9784120042201+%0D%0A9784860850999+%0D%0A9784776808121+%0D%0A9784046217585+%0D%0A9784336052117+%0D%0A9784490206937+%0D%0A9784829144916'
  JANS = example.split '+%0D%0A'
  console.log JANS
  pc.getPCInfolist conf, JANS, (err, res)->
    console.log res
  */


  db.open(conf.db, function(err, client) {
    var Commodities, field, key, query, unit;
    if (err) {
      throw err;
    }
    Commodities = client.collection('commodities');
    key = 'JAN';
    query = {};
    query[key] = {
      $ne: ''
    };
    query.amazon = {
      $exists: false
    };
    field = {
      _id: 0
    };
    field[key] = 1;
    unit = 10000;
    return Sync(function() {
      var activeWorkers, getter, i, updater, wkcb, worker, _i, _results;
      updater = function(data) {
        var d, i, options, update, _i, _len, _results;
        _results = [];
        for (i = _i = 0, _len = data.length; _i < _len; i = ++_i) {
          d = data[i];
          query[key] = d.JAN;
          update = {
            $set: {
              amazon: d
            }
          };
          options = {
            safe: true
          };
          _results.push(Sync(function() {
            var doc;
            return doc = Commodities.update.sync(Commodities, query, update, options);
          }));
        }
        return _results;
      };
      getter = function() {
        var JAN, JANS, data, i, _i, _len;
        data = pc.getList.sync(null, conf.http, JANS);
        if (JANS.length === data.length) {
          updater(data);
        } else {
          console.log("data contains valid data");
          for (i = _i = 0, _len = JANS.length; _i < _len; i = ++_i) {
            JAN = JANS[i];
            data = pc.getList.sync(null, conf.http, [JAN]);
            if (data.length > 0) {
              updater(data);
            } else {
              updater([
                {
                  JAN: JAN,
                  asin: null
                }
              ]);
            }
          }
        }
        return JANS = [];
      };
      activeWorkers = numWorkers;
      if (cluster.isMaster) {
        cluster.on('death', function(worker) {
          console.log("worker: " + worker.pid + " is killed");
          activeWorkers--;
          if (activeWorkers === 0) {
            return client.close();
          }
        });
        _results = [];
        for (i = _i = 0; 0 <= numWorkers ? _i < numWorkers : _i > numWorkers; i = 0 <= numWorkers ? ++_i : --_i) {
          worker = cluster.fork();
          wkcb = (function(i) {
            return function(msg) {
              var count, cursor;
              if (msg.cmd === 'ready') {
                count = Commodities.count.sync(Commodities, query);
                if (i * unit < count) {
                  cursor = Commodities.find(query, field, {
                    limit: unit,
                    skip: i * unit
                  });
                  this.send({
                    cmd: 'update',
                    parent: this.pid,
                    index: i * unit,
                    cursor: cursor
                  });
                } else {
                  this.kill();
                }
              }
            };
          })(i);
          _results.push(worker.on('message', wkcb));
        }
        return _results;
      } else {
        process.on('message', function(msg) {
          var cursor, doc, index, parent;
          if (msg.cmd === 'update') {
            parent = msg.parent;
            index = msg.index;
            cursor = msg.cursor;
            while ((doc = cursor.nextObject.sync(cursor)) !== null) {
              console.log(parent, index + 1, doc);
              JANS[index % unit] = doc.JAN;
              if ((++index % unit) === 0) {
                getter();
              }
            }
            if (JANS.length > 0) {
              return getter();
            }
          }
        });
        return process.send({
          cmd: 'ready'
        });
      }
    });
  });

}).call(this);
