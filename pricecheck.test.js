// Generated by CoffeeScript 1.3.3
(function() {
  var conf, db, limit, pc, total_size;

  conf = require('./config');

  db = require('./lib/db');

  pc = require('./lib/pricecheck');

  limit = 10;

  total_size = 20000;

  db.open(conf.db, function(err, client) {
    var Commodities, cursor, fields, index, map, options, query;
    if (err) {
      throw err;
    }
    Commodities = client.collection('commodities');
    query = {
      JAN: {
        $ne: ''
      }
    };
    fields = {
      _id: 0,
      JAN: 1
    };
    options = {
      sort: [["JAN", 1]]
    };
    if (limit > 0) {
      options.limit = limit;
    }
    index = 0;
    cursor = Commodities.find(query, fields, options);
    map = function(skip) {
      console.log("skip: " + skip + "/total_size: " + total_size);
      if (skip === total_size) {
        client.close();
        process.exit();
      }
      if (skip > 0) {
        options.skip = skip;
      }
      return Commodities.find(query, fields, options).toArray(function(err, docs) {
        var len, map2, map3;
        if (err) {
          console.log("Error: " + err + " and retry");
          setTimeout((function() {
            return map(i);
          }), 15 * 1000);
          return;
        }
        len = docs.length;
        map2 = function() {
          var JANS, doc, i, _i, _len;
          JANS = [];
          for (i = _i = 0, _len = docs.length; _i < _len; i = ++_i) {
            doc = docs[i];
            console.log(JANS[i] = doc.JAN);
          }
          return pc.getList(conf.http, JANS, function(err, datas) {
            var data, func, q, update, _j, _len1, _results;
            if (err) {
              console.log("Error: " + err + " and retry");
              setTimeout((function() {
                return map2();
              }), 15 * 1000);
              return;
            }
            index += len;
            return process.nextTick((function() {
              return map(skip + limit);
            }));
            if (datas.length === len) {
              _results = [];
              for (i = _j = 0, _len1 = datas.length; _j < _len1; i = ++_j) {
                data = datas[i];
                q = {
                  JAN: data.JAN
                };
                update = {
                  $set: {
                    amazon: data
                  }
                };
                options = {
                  safe: true
                };
                func = function() {
                  return Commodities.update(q, update, options, function(err, count) {
                    if (err) {
                      console.log("Error: " + err + " and retry");
                      process.nextTick((function() {
                        return func();
                      }));
                      return;
                    }
                    if ((i + 1) === len) {
                      index += len;
                      return process.nextTick((function() {
                        return map(skip + limit);
                      }));
                    }
                  });
                };
                _results.push(func());
              }
              return _results;
            } else {
              console.log("data contains valid data : JANS " + len + " - datas " + datas.length);
              return map3(0);
            }
          });
        };
        map3 = function(i) {
          var JAN;
          if (i === len) {
            return process.nextTick(function() {
              return map(skip + limit);
            });
          }
          JAN = docs[i].JAN;
          return pc.getList(conf.http, [JAN], function(err, datas) {
            var data, func, q, update;
            if (err) {
              console.log("Error: " + err + " and retry");
              setTimeout((function() {
                return map3(i);
              }), 15 * 1000);
              return;
            }
            if (datas.length > 0) {
              data = datas[0];
            } else {
              data = {
                JAN: JAN,
                asin: null
              };
            }
            q = {
              JAN: JAN
            };
            update = {
              $set: {
                amazon: data
              }
            };
            options = {
              safe: true
            };
            func = function() {
              return Commodities.update(q, update, options, function(err, count) {
                if (err) {
                  console.log("Error: " + err + " and retry");
                  process.nextTick((function() {
                    return func();
                  }));
                  return;
                }
                console.log("" + (++index) + ": " + JAN);
                if ((i + 1) === len) {
                  process.nextTick((function() {
                    return map3(i + 1);
                  }));
                } else {
                  return map3(i + 1);
                }
              });
            };
            return func();
          });
        };
        return map2();
      });
    };
    console.log("Commodities.count");
    return cursor.count(function(err, count) {
      total_size = Math.ceil(count / limit) * limit;
      console.log("total_size = " + total_size);
      return map(0);
    });
  });

}).call(this);
