// Generated by CoffeeScript 1.3.1

/*
##  linkshare.coffee
##
##  TODO: 文字化け問題 : grep "�"
*/


(function() {
  var Stream, concate, conf, db, fs, ftp, makeJSON, os, rs, seed, split, txt, zlib;

  Stream = require('stream').Stream;

  zlib = require('zlib');

  fs = require('fs');

  ftp = require('./lib/ftp').ftp;

  db = require('./lib/db');

  conf = require('./config');

  /*
  ## split : line split stream
  */


  split = function(matcher) {
    var soFar, stream;
    stream = new Stream;
    soFar = '';
    if (!matcher) {
      matcher = '\n';
    }
    stream.writable = true;
    stream.readable = true;
    stream.write = function(buffer) {
      var pieces;
      pieces = (soFar + buffer).split(matcher);
      soFar = pieces.pop();
      pieces.forEach(function(piece) {
        return stream.emit('data', "" + piece);
      });
      return true;
    };
    stream.end = function() {
      if (soFar) {
        stream.emit('data', "" + soFar);
      }
      return stream.emit('end');
    };
    return stream;
  };

  /*
  ## makeJSON : make JSON stream
  */


  makeJSON = function() {
    var MID, index, name, stream, updateTime, _type;
    stream = new Stream;
    stream.writable = true;
    stream.readable = true;
    _type = ['', '中古', '新品', '大人買い'];
    MID = null;
    name = null;
    updateTime = null;
    index = 0;
    stream.write = function(buffer) {
      var buy, data, fixed, isbn10, isbn13, keywords, old, prices, release, sku, type, _data, _new, _ref, _ref1, _ref2, _ref3;
      data = buffer.split('|');
      if (data[0] === 'HDR') {
        MID = data[1];
        name = data[2].replace('【PC・携帯共通】', '');
        updateTime = new Date(data[3]);
        _data = {
          MID: MID,
          name: name,
          update: updateTime
        };
      } else if (data[0] === 'TRL') {
        _data = data[1];
        /*
              console.log('Trailer %d', data[1]);
              console.log('index = %d', in2);
              console.log('None category = %d', nonCategory);
              # console.log('];');
              console.log('Seed_categories = ', Category, ';');
        */

        stream.end();
      } else {
        keywords = data[18].split('~~');
        prices = keywords[0].split('/');
        fixed = ((_ref = prices[2]) != null ? _ref.indexOf(':') : void 0) > 0 ? Number(prices[2].split(':')[1]) : 0;
        _new = ((_ref1 = prices[1]) != null ? _ref1.indexOf(':') : void 0) > 0 ? Number(prices[1].split(':')[1]) : 0;
        old = ((_ref2 = prices[0]) != null ? _ref2.indexOf(':') : void 0) > 0 ? Number(prices[0].split(':')[1]) : 0;
        buy = ((_ref3 = prices[3]) != null ? _ref3.indexOf(':') : void 0) > 0 ? Number(prices[3].split(':')[1]) : 0;
        if (data[3] === '本・雑誌') {
          isbn13 = data[23];
          isbn10 = keywords[2];
        }
        type = _type[data[0].charAt(0)];
        sku = data[0].slice(1);
        release = new Date(data[14]);
        _data = {
          title: data[1],
          category: {
            primary: data[3],
            sub: data[4].split('~~')
          },
          url: {
            item: data[5],
            image: data[6]
          },
          type: type,
          author: data[8],
          sku: sku,
          JAN: data[23],
          price: {
            fixed: fixed,
            "new": _new,
            old: old,
            buy: buy
          },
          release: release,
          mount: 0,
          update: updateTime
        };
        switch (_data.category.primary) {
          case '本・雑誌':
            _data.isbn13 = isbn13;
            _data.isbn10 = isbn10;
        }
        stream.emit('data', "" + (JSON.stringify(_data)) + "\n");
      }
      return true;
    };
    stream.end = function() {
      return stream.emit('end');
    };
    return stream;
  };

  /*
  ##  concate stream : concate stream
  ##
  ##  concate chunk data to array
  */


  concate = function(unit) {
    var data, index, stream;
    if (unit == null) {
      unit = 100;
    }
    stream = new Stream;
    stream.writable = true;
    stream.readable = true;
    index = 0;
    data = [];
    stream.write = function(buffer) {
      data[index] = buffer;
      if ((++index % unit) === 0) {
        stream.emit('data', data);
        data = [];
      }
      return true;
    };
    stream.end = function() {
      if ((index % unit) > 0) {
        stream.emit('data', data);
        data = [];
      }
      return stream.emit('end');
    };
    return stream;
  };

  /*
  ## main :
  */


  seed = conf.seed;

  txt = seed.replace('.gz', '');

  rs = fs.createReadStream(txt, {
    encoding: 'utf8'
  });

  os = process.stdout;

  rs.pipe(split()).pipe(makeJSON()).pipe(concate()).pipe(os);

}).call(this);
