// Generated by CoffeeScript 1.3.1
(function() {
  var AmazonManager, EventEmitter, amaMan, conf,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  EventEmitter = require('events').EventEmitter;

  AmazonManager = (function(_super) {

    __extends(AmazonManager, _super);

    AmazonManager.name = 'AmazonManager';

    AmazonManager.prototype.api = function(method, args, callback) {
      if (args == null) {
        args = [];
      }
      if (callback == null) {
        callback = function() {};
      }
      if (this.methods[method] != null) {
        this.args = typeof args !== "function" ? args : void 0;
        this.callback = callback = typeof args === "function" ? args : callback;
        console.log("calling api ('" + method + "', [" + (JSON.stringify(args)) + "], " + callback + ")");
        return this.methods[method]();
      } else {
        return callback(999, new Error('No such method'));
      }
    };

    function AmazonManager(options, cb) {
      var _this = this;
      if (options == null) {
        options = {};
      }
      if (cb == null) {
        cb = function() {};
      }
      if (typeof options === "function") {
        cb = options;
      }
      if (options.proxy != null) {
        this.proxy = options.proxy;
      }
      this.methods = {
        'signin': function(callback) {
          _this.route = 'signin';
          return _this.trigger();
        },
        'update': function(callback) {
          return callback(err, result);
        },
        'stop': function(callback) {
          return callback(err, result);
        },
        'resale': function(callback) {
          return callback(err, result);
        },
        'add': function(callback) {
          return callback(err, result);
        },
        'signout': function(callback) {
          _this.route = 'signout';
          return _this.trigger();
        }
      };
      this.routes = ['signin', 'signin-onload', 'signin-complete', 'productSummary', 'productSummary-onload', 'update', 'update-onload', 'resale', 'resale-onload', 'add-catalog', 'add-catalog-onload', 'add-select', 'add-fillsubmit', 'signout', 'signout-onload'];
      this.trigger = function(status) {
        if (status == null) {
          status = 'internal';
        }
        console.log("emit '" + status + "'   ('" + _this.route + "')");
        return _this.emit('route', status);
      };
      this.on('route', function(status) {
        console.log("on 'route', ('" + status + "')   : '" + _this.route + "'");
        switch (_this.route) {
          case 'signin':
            _this.route = 'signin-onload';
            return _this.trigger();
          case 'signin-onload':
            _this.route = 'idle';
            return _this.trigger();
          case 'signout':
            _this.route = 'signout-onload';
            return _this.trigger();
          case 'signout-onload':
            _this.route = 'close';
            return _this.trigger();
          case 'idle':
            console.log('now idling...');
            return _this.callback(null, null);
          case 'close':
            console.log("phantom.exit()");
            return _this.callback(null, null);
        }
      });
      cb(null, this);
    }

    return AmazonManager;

  })(EventEmitter);

  conf = require('./config');

  amaMan = new AmazonManager(function(err, am) {
    return am.api('signin', conf.amazon, function(err, res) {
      console.log('signin complete');
      return am.api('signout', function(err, res) {
        return console.log('signout complete');
      });
    });
  });

}).call(this);
