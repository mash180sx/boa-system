// Generated by CoffeeScript 1.3.3
(function() {
  var bo, conf, db, limit, no_new_rate, no_used_rate, out_collection, total_size;

  conf = require('./config');

  db = require('./lib/db');

  bo = require('./lib/bookoff');

  no_used_rate = 0.8;

  no_new_rate = 10.0;

  out_collection = "temp";

  limit = 10000;

  total_size = 20000;

  db.open(conf.db, function(err, client) {
    var Temp, fields, index, map, options, query;
    if (err) {
      throw err;
    }
    Temp = client.collection('temp');
    query = {
      gross_profit: {
        $gte: 1000
      }
    };
    fields = {
      _id: 0
    };
    options = {
      sort: [["gross_profit", -1]]
    };
    if (limit > 0) {
      options.limit = limit;
    }
    index = 0;
    map = function(skip) {
      var bofinal, i;
      console.log("skip: " + skip + "/total_size: " + total_size);
      if (skip === total_size) {
        client.close();
        process.exit();
      }
      if (skip > 0) {
        options.skip = skip;
      }
      i = 0;
      bofinal = function() {
        if (i === 0) {
          --index;
          return process.nextTick((function() {
            return map(skip + limit);
          }));
        }
      };
      return Temp.find(query, fields, options).toArray(function(err, docs) {
        var func, l;
        if (err) {
          throw err;
        }
        l = docs.length;
        func = function(i) {
          var bocb, doc;
          if (i === l) {
            return;
          }
          doc = docs[i];
          bocb = function(err, detail) {
            if (err) {
              console.log("" + doc.sku + "  Error: " + err);
              setTimeout(function() {
                return func(i);
              }, 15 * 1000);
              return;
            } else if ((detail != null ? detail.amount : void 0) != null) {
              doc.amount = detail.amount;
              console.log(index++, doc.sku, doc.gross_profit, doc.gross_profit_ratio, doc.amount);
              Temp.update({
                sku: doc.sku
              }, {
                $set: {
                  amount: doc.amount
                }
              });
            } else {
              console.log(index++, detail);
            }
            return func(i + 1);
          };
          return bo.getBOItemDetail(doc.sku, conf, bocb);
        };
        return func(0);
      });
    };
    return Temp.count(query, function(err, count) {
      total_size = Math.ceil(count / limit) * limit;
      return map(0);
    });
  });

}).call(this);
