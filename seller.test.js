// Generated by CoffeeScript 1.3.3
(function() {
  var bo, conf, db, limit, no_new_rate, no_used_rate, out_collection, total_size;

  conf = require('./config');

  db = require('./lib/db');

  bo = require('./lib/bookoff');

  no_used_rate = 0.8;

  no_new_rate = 10.0;

  out_collection = "temp";

  limit = 10000;

  total_size = 20000;

  db.open(conf.db, function(err, client) {
    var Temp, fields, index, map, options, query;
    if (err) {
      throw err;
    }
    Temp = client.collection('temp');
    Temp.update({
      amount: 1
    }, {
      $set: {
        amount: 0
      }
    }, {
      multi: true
    });
    query = {
      gross_profit: {
        $gte: 1000
      }
    };
    fields = {
      _id: 0
    };
    options = {
      sort: [["gross_profit", -1]]
    };
    if (limit > 0) {
      options.limit = limit;
    }
    index = 0;
    map = function(skip) {
      console.log("skip: " + skip + "/total_size: " + total_size);
      if (skip === total_size) {
        client.close();
        process.exit();
      }
      if (skip > 0) {
        options.skip = skip;
      }
      return Temp.find(query, fields, options).toArray(function(err, docs) {
        var len, map2;
        if (err) {
          console.log("Error: " + err + " and retry");
          setTimeout((function() {
            return map(skip);
          }), 15 * 1000);
          return;
        }
        len = docs.length;
        map2 = function(i) {
          var doc;
          if (i === len) {
            index--;
            process.nextTick(function() {
              return map(skip + limit);
            });
            return;
          }
          doc = docs[i];
          if (doc.sku != null) {
            return setTimeout(function() {
              return bo.getBOItemDetail(doc.sku, conf, function(err, detail) {
                var options2, query2, update;
                if (err) {
                  console.log("Error: " + err + " and retry");
                  setTimeout((function() {
                    return map2(i);
                  }), 15 * 1000);
                  return;
                }
                if (detail.amount != null) {
                  doc.amount = detail.amount;
                  console.log(index++, JSON.stringify(doc));
                  query2 = {
                    sku: doc.sku
                  };
                  update = {
                    $set: {
                      amount: doc.amount
                    }
                  };
                  options2 = {
                    safe: true
                  };
                  return Temp.update(query2, update, options, function(err, count) {
                    if (err) {
                      console.log("Error: " + err + " and retry");
                      setTimeout((function() {
                        return map2(i);
                      }), 15 * 1000);
                      return;
                    }
                    return map2(i + 1);
                  });
                } else {
                  console.log(index++, detail);
                  return map2(i + 1);
                }
              });
            }, 200);
          }
        };
        return map2(0);
      });
    };
    return Temp.count(query, function(err, count) {
      total_size = Math.ceil(count / limit) * limit;
      return map(0);
    });
  });

}).call(this);
