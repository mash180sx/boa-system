// Generated by CoffeeScript 1.3.1
(function() {
  var bo, conf, db, limit, no_new_rate, no_used_rate, out_collection, total_size,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  conf = require('./config');

  db = require('./lib/db');

  bo = require('./lib/bookoff');

  no_used_rate = 0.8;

  no_new_rate = 10.0;

  out_collection = "temp";

  limit = 10000;

  total_size = 20000;

  db.open(conf.db, function(err, client) {
    var Temp, fields, index, map, options, query;
    if (err) {
      throw err;
    }
    Temp = client.collection('temp');
    query = {
      gross_profit: {
        $gte: 1000
      }
    };
    fields = {
      _id: 0
    };
    options = {
      sort: [["gross_profit", -1]]
    };
    if (limit > 0) {
      options.limit = limit;
    }
    index = 0;
    map = function(skip) {
      console.log("skip: " + skip + "/total_size: " + total_size);
      if (skip === total_size) {
        client.close();
        process.exit();
      }
      if (skip > 0) {
        options.skip = skip;
      }
      return Temp.find(query, fields, options).each(function(err, doc) {
        if (err) {
          throw err;
        }
        return bo.getBOItemDetail(doc.sku, conf, function(err, detail) {
          if (__indexOf.call(detail, amount) >= 0) {
            doc.amount = detail.amount;
            console.log(index++, JSON.stringify(doc));
          } else {
            console.log(index++, detail);
          }
          if (doc === null) {
            index--;
            return process.nextTick((function() {
              return map(skip + limit);
            }));
          }
        });
      });
    };
    return map(0);
    /*
      Temp.count query, (err, count)->
        total_size = Math.ceil(count/limit) * limit
        map 0
    */

  });

}).call(this);
